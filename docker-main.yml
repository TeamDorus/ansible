---

######################################################################################
#
#       Install docker & docker-compose
#
######################################################################################
- name: Play to install docker and docker-compose
  hosts:
    - dockerhosts
    - portainerhost
  become: true

  tasks:
    - name: Make sure all packages are up-to-date
      apt:
        upgrade: dist
        update_cache: true


    - name: Install prerequisites
      apt:
        name:
          - net-tools
          - python3-pip
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present


    - name: Add docker apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg


    - name: Add docker repo
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable


    - name: Remove AppArmor package since it conflicts with Docker
      apt:
        name: apparmor
        state: absent


    - name: Install docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true


    - name: Add user to the docker group
      user:
        name: eric
        groups: docker
        append: true


    - name: Install docker-compose
      pip:
        name: docker-compose


    ######################################################################################
    #
    #       Setup remote docker api for Portainer
    #
    ######################################################################################
    - name: Create directory for the docker remote api service definition file
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: '0755'


    - name: Copy the file for docker remote api service definition to the target
      copy:
        src: ./docker-remote-api.conf
        dest: /etc/systemd/system/docker.service.d/docker-remote-api.conf
        owner: root
        group: root
        mode: '0644'
      register: docker_service


    - name: Restart the docker service and issue a deamon-reload
      systemd:
        name: docker
        state: restarted
        daemon_reload: true
      when: docker_service.changed


######################################################################################
#
#       Add hosts as endpoints in portainer
#
######################################################################################
- name: Play om een docker hosts als endpoint aan portainer toe te voegen
  hosts: dockerhosts
  become: false

  vars_files:
    - vars/secrets.yml

  vars:
    portainer_hostname: pindos
    portainer_endpoint: "http://{{ portainer_hostname }}:9000/api"
    endpoints:
      - {name: "{{ ansible_hostname }}",
         url: "tcp://{{ ansible_default_ipv4.address }}:2375"}


  tasks:

    - name: Generate authentication token
      uri:
        url: "{{ portainer_endpoint }}/auth"
        method: POST
        return_content: true
        body_format: json
        body: '{"Username": "{{ portainer_admin_user }}", "Password": "{{ portainer_admin_password }}"}'
      register: auth_token
      when: portainer_admin_user and portainer_admin_password is defined


    - name: Get Endpoints
      uri:
        url: "{{ portainer_endpoint }}/endpoints"
        method: GET
        return_content: true
        headers:
          Authorization: Bearer {{ (auth_token.content|from_json).jwt }}
      register: portainer_known_endpoints_raw


    - name: Save endpoints as fact
      set_fact:
        portainer_known_endpoints: "{{ portainer_known_endpoints_raw.json | map(attribute='Name') | list }}"


    # - name: "Show known endpoints"
    #   debug: msg="{{ portainer_known_endpoints }}"


    - name: Add Endpoints
      shell: |
        curl --silent --show-error -o - {{ portainer_endpoint }}/endpoints \
          -H "Authorization: Bearer {{ (auth_token.content|from_json).jwt }}" \
          -F "EndpointCreationType=1" \
          -F "Name={{ item.name }}" \
          -F "URL={{ item.url }}"
      args:
        warn: false
      with_items:
        - "{{ endpoints | list }}"
      when: item.name not in portainer_known_endpoints
      register: response
      tags: [skip_ansible_lint]
