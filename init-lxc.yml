---
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#           Configure new LXC container
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- name: Play to configure a new LXC container on Proxmox host
  hosts: all
  remote_user: "root"
  gather_facts: false   # wait with gathering facts until host is up and running

  vars_files:
    - vars/secrets.yml


  tasks:

    - name: Wait for container to become reachable
      wait_for_connection:
        timeout: 300


    - name: Gather facts for first time
      setup:


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #   Upgrade packages, setup user account " eric" and set timezone
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Make sure all packages are up-to-date
      apt:
        upgrade: dist
        update_cache: true


    - name: Create user 'eric' and add to sudo group
      user:
        name: eric
        password: "{{ lxc_eric_password_hash }}"
        shell: "/bin/bash"
        groups: sudo
        append: true

    - name: Create .ssh directory for eric
      file:
        path: "~eric/.ssh"
        state: directory
        owner: "eric"
        group: "eric"
        mode: g-rwx,o-rwx

    - name: Copy the publickey to '~eric/.ssh/authorized_keys'
      copy:
        src: "~/.ssh/authorized_keys"
        dest: "~eric/.ssh/authorized_keys"
        owner: "eric"
        group: "eric"
        mode: '0600'


    - name: Set timezone to Europe/Amsterdam
      timezone:
        name: Europe/Amsterdam


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #   Create DNS host entry in de overrides table of unboud @ pfsense
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Get current hosts
      uri:
        url: "{{ pfsense_api_url }}"
        method: GET
        headers:
          Authorization: "{{ pfsense_api_id }} {{ pfsense_api_token }}"
        validate_certs: false
      register: result


    - name: Create a list of current host ip addresses
      set_fact:
        addrs: "{{ result | json_query('json.data[*].ip') }}"


    - name: Create host entry if the ip address does not yet exist in the list
      uri:
        url: "{{ pfsense_api_url }}"
        method: POST
        headers:
          Authorization: "{{ pfsense_api_id }} {{ pfsense_api_token }}"
        validate_certs: false
        body_format: "json"
        body:
          host: "{{ ansible_hostname }}"
          domain: "bartok.thouars.nl"
          ip: "{{ ansible_default_ipv4.address }}"
          apply: true
      when: ansible_default_ipv4.address not in addrs


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #   Final action, clear authorized_keys file for user "root"
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Remove authorized_keys file for root
      file:
        path: "~/.ssh/authorized_keys"
        state: absent
