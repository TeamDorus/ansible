---
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#         P Y R G O S 
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: Playbook om een ansible developemnt systeem op te tuigen
  hosts:
    - pyrgos
  become: true


  pre_tasks:
    - name: Load variable files
      include_vars: "{{ item }}"
      with_first_found:
        - "vars/devsys_{{ ansible_distribution }}.yml"
        - "vars/devsys_default.yml"


  tasks:
    - name: Make sure all packages are up-to-date
      apt:
        upgrade: dist
        update_cache: true


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Install generic tools
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Installeer algemene (ontwikkel) tools
      apt:
        name:
          - git
          - tree
          - python3-pip
          - python3-venv
          - cifs-utils
          - net-tools
          - inetutils-ping
          - wireguard
          - snmp
          - snmp-mibs-downloader
          - unzip
        state: present

    - name: Installeer tools om repositories toe te voegen
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Download and install synology MIB files
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Download Synology MIB file
      get_url:
        url: "https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/All/enu/Synology_MIB_File.zip"
        dest: "/root"
      register: download_MIB

       
    - name: Extract MIB file to root folder
      unarchive:
        remote_src: true
        src: "~/Synology_MIB_File.zip"
        dest: "/root"
      when: download_MIB.changed | bool


    - name: Copy MIB files to correct folder
      copy: 
        remote_src: true
        src: "/root/Synology_MIB_File/"
        dest: "/usr/share/snmp/mibs"
      when: download_MIB.changed | bool


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Install ssh keys and gitconfig file for ansible_user
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Installeer alle files uit de .ssh directory voor ansible_user
      copy:
        src: "~{{ ansible_user }}/.ssh/"
        dest: "~{{ ansible_user }}/.ssh/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: preserve


    - name: Installeer .gitconfig file voor ansible_user
      copy:
        src: "~{{ ansible_user }}/.gitconfig"
        dest: "~{{ ansible_user }}/.gitconfig"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: preserve


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Install ansible & related tools
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Installeer ansible
      apt:
        name:
          - ansible
          - sshpass             # in case you want to use password based ssh login
          - python3-proxmoxer
          - python3-pynetbox
        state: present

    - name: Installeer ansible collection for netbox
      command: /usr/bin/ansible-galaxy collection install netbox.netbox
      vars:
        ansible_become: false   # install as {{ ansible_user }}


    - name: Installeer ansible utils collection
      command: /usr/bin/ansible-galaxy collection install ansible.utils
      vars:
        ansible_become: false   # install as {{ ansible_user }}


    - name: Installeer ansible collection for zabbix
      command: /usr/bin/ansible-galaxy collection install community.zabbix
      vars:
        ansible_become: false   # install as {{ ansible_user }}



    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Install terraform
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Voeg terraform apt-key toe
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg


    - name: Voeg terraform repo toe
      apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com jammy main

    - name: Installeer terraform
      apt:
        name: terraform
        state: present
        update_cache: true


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Clone ansible GIT repository and related secrets files
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Create ansible directory
      file:
        path: "{{ projects_dir }}/ansible"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Clone ansible repository
      git:
        repo: git@github.com:TeamDorus/ansible.git
        accept_hostkey: true
        dest: "{{ projects_dir }}/ansible"
        clone: true
        update: true
      vars:
        ansible_become: false   # clone as {{ ansible_user }}

    - name: Create temp var because with_first_found fails with the variable ansible_user
      set_fact:
        devuser: "{{ ansible_user }}"

    - name: Copy ansible vault secrets.yml
      copy:
        src: "{{ item }}"
        dest: "{{ projects_dir }}/ansible/vars/secrets.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        decrypt: false          # do not decrypt the vault file
      with_first_found:
        - "~{{ devuser }}/ansible/vars/secrets.yml"
        - "~{{ devuser }}/Documents/ansible/vars/secrets.yml"

    - name: Copy ansible vault password file
      copy:
        src: "~{{ ansible_user }}/.ansible/passwd.txt"
        dest: "~{{ ansible_user }}/.ansible/passwd.txt"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    #
    #         Clone terraform GIT repository and related secrets files
    #
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Create terraform directory
      file:
        path: "{{ projects_dir }}/terraform"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Clone terraform repository
      git:
        repo: git@github.com:TeamDorus/terraform.git
        accept_hostkey: true
        dest: "{{ projects_dir }}/terraform"
        clone: true
        update: true
      vars:
        ansible_become: false   # clone as {{ ansible_user }}

    - name: Copy terraform secrets pw
      copy:
        src: "{{ item }}"
        dest: "{{ projects_dir }}/terraform/secret_vars_pw"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        decrypt: false          # do not decrypt the vault file
      with_first_found:
        - "~{{ devuser }}/terraform/secret_vars_pw"
        - "~{{ devuser }}/Documents/terraform/secret_vars_pw"

    - name: Copy terraform secrets api
      copy:
        src: "{{ item }}"
        dest: "{{ projects_dir }}/terraform/secret_vars_api"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        decrypt: false          # do not decrypt the vault file
      with_first_found:
        - "~{{ devuser }}/terraform/secret_vars_api"
        - "~{{ devuser }}/Documents/terraform/secret_vars_api"


